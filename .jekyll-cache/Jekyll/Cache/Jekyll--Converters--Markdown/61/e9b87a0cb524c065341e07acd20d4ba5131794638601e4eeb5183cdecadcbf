I"=<h2 id="排查步骤1">排查步骤1</h2>
<p>基本流程</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. top ==》  查看java 进程

2 top -Hp 具体进程id ==》 获取具体高负载线程Id

3 printf '%x' 线程id.  ===&gt; 打印16进制线程Id

4 jstack 进程id|grep 16进制线程id
</code></pre></div></div>

<p>启动参数配置了 -XX:+HeapDumpOnOutOfMemoryError 解释：表示当JVM发生OOM时（内存溢出），自动生成DUMP文件 （HeapDump） (默认在error.log 一个层级)
<img src="/images/business/WX20211124-131613@2x.png" alt="" />
    1.下载HeapDump 文件
    2.使用mat工具或jprofile分析(我使用的是mat)
    3.打开文件后，能够发现可疑线程，通常来说占用内存非常大。如单个线程3.9g</p>

:ET